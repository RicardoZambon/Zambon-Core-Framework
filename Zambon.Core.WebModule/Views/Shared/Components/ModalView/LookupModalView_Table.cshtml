@model Zambon.Core.Module.Xml.Views.SubViews.LookupModal

@inject Zambon.Core.Module.Services.ApplicationService app

@{ var view = (Zambon.Core.Module.Xml.Views.ListViews.LookupView)Model.View; }
<table class="table table-striped table-hover table-sm mb-0 position-relative rounded table-clickable-rows">
    <thead listview-header-for="@view.Columns?.Column" class="bg-primary text-white"></thead>
    <tbody>
        @{ 
            var itemsCollection = app.GetLookUpViewItemsCollection(Model.ViewId);
            if (itemsCollection != null)
            {
                foreach (var currentObject in itemsCollection)
                {
                    app.SetLookUpViewCurrentObject(Model.ViewId, currentObject);
                    var id = view.GetCellValue(app, "ID");

                    <tr id="@(Model.Id)_table_tr@(id)">
                        <th scope="row" class="col-0 pl-0 pr-0">&nbsp;</th>

                        <th scope="row" class="col-fit text-center">
                            @*<div button-for="@Model.Buttons.Button" button-target="Inline" button-hide-text="true" asp-route-ListViewId="@Model.ViewId" button-current-object="@Model.CurrentObject"></div>*@
                            <div class="custom-control custom-checkbox lookupview">
                                <input type="checkbox" class="custom-control-input" id="@(Model.Id)_table_item@(id)" name="LookupSelection" value="@id">
                                <label class="custom-control-label" for="@(Model.Id)_table_item@(id)">&nbsp;</label>
                            </div>
                        </th>

                        @if ((view.Columns?.Column?.Length ?? 0) > 0)
                        {
                            @for (var c = 0; c < view.Columns.Column.Length; c++)
                            {
                                <td lookupview-column-for="@view.Columns.Column[c]" lookupview-column-model="@view"></td>
                            }
                        }
                    </tr>
                }
                app.ClearLookUpViewCurrentObject(Model.ViewId);
            }
        }
    </tbody>
</table>