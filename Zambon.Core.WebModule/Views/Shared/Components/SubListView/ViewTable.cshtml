@using System.Linq.Dynamic.Core;

@model Zambon.Core.Module.Xml.Views.ListViews.ListView

@inject Zambon.Core.Module.Services.ApplicationService app

<table class="table table-striped table-hover table-sm mb-0">
    <thead listview-header-for="@Model.Columns?.Column" class="bg-primary text-white"></thead>
    <tbody>
        @{ 
            var itemsCollection = app.GetListViewItemsCollection(Model.ViewId);
            if (itemsCollection != null)
            {
                if (itemsCollection.Count() > 0)
                {
                    foreach (var currentObject in itemsCollection)
                    {
                        app.SetListViewCurrentObject(Model.ViewId, currentObject);

                        var backColor = ""; var foreColor = ""; var customClass = "";
                        if ((Model.PaintOptions?.PaintOption?.Length ?? 0) > 0)
                        {
                            backColor = Model.PaintOptions?.GetApplicableBackColor(currentObject, app.Expressions);
                            foreColor = Model.PaintOptions?.GetApplicableForeColor(currentObject, app.Expressions);
                            customClass = Model.PaintOptions?.GetApplicableCustomClass(currentObject, app.Expressions);
                        }

                        <tr class="@(backColor)">
                            <th scope="row" class="col-0 pl-0 pr-0">&nbsp;</th>

                            @if ((Model?.Buttons?.Button?.Length ?? 0) > 0 && Model.Buttons.Button.Any(x => x.IsApplicable("Inline")))
                            {
                                <th scope="row" class="col-fit text-center">
                                    <div button-for="@Model.Buttons.Button" button-target="Inline" button-hide-text="true" button-current-object="@currentObject"></div>
                                </th>
                            }

                            @if ((Model.Columns?.Column?.Length ?? 0) > 0)
                            {
                                @for (var c = 0; c < Model.Columns.Column.Length; c++)
                                {
                                    <td listview-column-for="@Model.Columns.Column[c]" listview-column-model="@Model" listview-column-item-forecolor="@(foreColor)" listview-column-item-class="@(customClass)" listview-column-is-sublistview="true"></td>
                                }
                            }
                        </tr>
                    }
                    app.ClearListViewCurrentObject(Model.ViewId);
                }
                else if (!string.IsNullOrWhiteSpace(Model.MessageOnEmpty))
                {
                    <tr>
                        <td class="col text-center" colspan="@(1 + ((Model?.Buttons?.Button?.Length ?? 0) > 0 && Model.Buttons.Button.Any(x => x.IsApplicable("Inline")) ? 1 : 0) + (Model?.Columns?.Column?.Length ?? 0))">@Model.MessageOnEmpty</td>
                    </tr>
                }
            }
        }
    </tbody>
</table>