<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zambon.Core.Database.ChangeTracker</name>
    </assembly>
    <members>
        <member name="T:Zambon.Core.Database.ChangeTracker.CoreChangeTracker">
            <summary>
            Custom ChangeTracker used to track instances of all objects before actually saving in database.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Zambon.Core.Database.ChangeTracker.Services.IInstanceKeyService)">
            <summary>
            Default constructor.
            </summary>
            <param name="_cache">Service for accessing the distributed cache.</param>
            <param name="_instanceKeyService">Service for accessing the instance key.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.IsTracking``1(Microsoft.EntityFrameworkCore.DbContext,``0,System.Boolean)">
            <summary>
            Checks if the change tracker is already tracking the object instance.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="ctx">The database context instance.</param>
            <param name="entity">The entity instance.</param>
            <param name="checkTemp">By default will only check object with already applied values.</param>
            <returns>If the object is already being tracked returns true.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.IsTracking(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Boolean)">
            <summary>
            Checks if the change tracker is already tracking the object instance.
            </summary>
            <param name="entry">The entity database entry.</param>
            <param name="checkTemp">By default will only check object with already applied values.</param>
            <returns>If the object is already being tracked returns true.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.IsTracking(Zambon.Core.Database.ChangeTracker.StoreKey,System.Boolean)">
            <summary>
            Checks if the change tracker is already tracking the object instance.
            </summary>
            <param name="storeKey">The database store key.</param>
            <param name="checkTemp">By default will only check object with already applied values.</param>
            <returns></returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.LoadObjects(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            Read all objects in database and loads them into the EF DbContext.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.Add``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{``0},System.Boolean)">
            <summary>
            Add an object into the ChangeTracker.
            </summary>
            <typeparam name="T">Must be a ITrackableEntity</typeparam>
            <param name="entry">The object instance.</param>
            <param name="saveToTemp">Should save in temporary edited objects or already applied changes.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.Remove(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Boolean)">
            <summary>
            Removes an object from ChangeTracker
            </summary>
            <param name="entry">The object instance.</param>
            <param name="onlyFromTemp">Removes only from temp store or from both.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.Remove(Zambon.Core.Database.ChangeTracker.StoreKey,System.Boolean)">
            <summary>
            Removes an object from ChangeTracker
            </summary>
            <param name="objectKey">The object key.</param>
            <param name="onlyFromTemp">Removes only from temp store or from both.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.CoreChangeTracker.Clear(System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Clears the stored entities in distributed cache.
            </summary>
            <param name="clearStored">If should clear the stored entities with changes already applied.</param>
            <param name="clearTemp">If should clear the temp stored entities.</param>
            <param name="tempModelType">Filters the temp model to clean only this same type.</param>
            <param name="forceClear">Force to clean all entities in temp.</param>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.DI.CacheInjection">
            <summary>
            Dependency injection methods to configure the change tracker database cache.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.DI.CacheInjection.AddChangeTrackerDbCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions})">
            <summary>
            Extension method to configure the change tracker database cache.
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
            <param name="options">An System.Action`1 to configure the provided Microsoft.Extensions.Caching.SqlServer.SqlServerCacheOptions.</param>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.DI.ServicesInjection">
            <summary>
            Dependency injection methods to configure the change tracker general services.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.DI.ServicesInjection.AddChangeTrackerServices``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Extension method to configure the change tracker general services.
            </summary>
            <typeparam name="TInstanceKeyService">The object type descendant from IInstanceKeyService to use.</typeparam>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Extensions.DbContextExtension">
            <summary>
            Extension methods used by DbContext.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.DbContextExtension.IsNewEntry``1(Microsoft.EntityFrameworkCore.DbContext,``0)">
            <summary>
            Checks if the entry already exists in database.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="ctx">The database context instance.</param>
            <param name="entity">The object instance to check.</param>
            <returns>Returns true if the entry does not exists yet in database.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.DbContextExtension.Set(Microsoft.EntityFrameworkCore.DbContext,System.Type)">
            <summary>
            Creates a Microsoft.EntityFrameworkCore.DbSet`1 that can be used to query and save instances of TEntity.
            </summary>
            <param name="ctx">The database context instance.</param>
            <param name="type">The type of entity for which a set should be returned.</param>
            <returns>A set for the given entity type.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Extensions.EntityEntryExtensions">
            <summary>
            Extension methods used in entity entries.
            </summary>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Extensions.ProxyExtension">
            <summary>
            Helper methods to use when having Castle.Proxies entities.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.ProxyExtension.GetUnproxiedType(System.Object)">
            <summary>
            Get the object type without the proxy.
            </summary>
            <param name="entity">The entity instance.</param>
            <returns>Returns the original type of the entity.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.ProxyExtension.GetUnproxiedType(System.Type)">
            <summary>
            Get the object type without the proxy.
            </summary>
            <param name="type">The object type.</param>
            <returns>Returns the original type.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Extensions.SerializationExtension">
            <summary>
            Extension methods to serialize and deserialize objects from array of bytes.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.SerializationExtension.DeserializeStoreKeys(System.Byte[])">
            <summary>
            Deserialize an array of stored keys.
            </summary>
            <param name="bytes">The bytes array to deserialize.</param>
            <returns>Returns an array of StoreKey.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.SerializationExtension.SerializeStoreKeys(Zambon.Core.Database.ChangeTracker.StoreKey[])">
            <summary>
            Serialize an array of stored keys.
            </summary>
            <param name="keys">The StoreKey array to serialize.</param>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.SerializationExtension.DeserializeStoredObject(System.Byte[])">
            <summary>
            Deserialize a dictionary of the object's changed properties.
            </summary>
            <param name="bytes">The bytes array to deserialize.</param>
            <returns>Returns a dictionary of string (property name) and object (value).</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Extensions.SerializationExtension.SerializeStoredObject(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Serialize a dictionary of the object's changed properties.
            </summary>
            <param name="dictionary">The dictionary to serialize.</param>
            <returns>Returns an array of bytes.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.InstanceKey">
            <summary>
            Represent the user key used to access the stored objects in database change tracker cache.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.ChangeTracker.InstanceKey.DatabaseKey">
            <summary>
            Guid unique to each user.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.ChangeTracker.InstanceKey.CurrentUserId">
            <summary>
            Current user ID.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.InstanceKey.#ctor(System.Guid,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="databaseKey">Guid unique to each user.</param>
            <param name="currentUserId">Current user ID.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.InstanceKey.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.InstanceKey.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Guid object represent the same value.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns>true if g is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.InstanceKey.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns>The value of this System.Guid plus the current user ID, formatted by using the format specifier as follows: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx_####.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Interfaces.ITrackableEntity">
            <summary>
            Represents database tracking classes.
            </summary>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.Services.IInstanceKeyService">
            <summary>
            Service used to store and retrieve the instance key in user's session.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Services.IInstanceKeyService.StoreKey(System.Guid)">
            <summary>
            Stores the key in user current session.
            </summary>
            <param name="databaseInstanceKey">Unique key to the user.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.Services.IInstanceKeyService.RetrieveKey">
            <summary>
            Retrieves the current user instance key.
            </summary>
            <returns>Returns an object of type InstanceKey.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ChangeTracker.StoreKey">
            <summary>
            Represents the key for each object save in custom ChangeTracker.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.ChangeTracker.StoreKey.ModelType">
            <summary>
            The ModelType of the entity as string.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.ChangeTracker.StoreKey.EntityKeys">
            <summary>
            The ID of the entity as integer.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.StoreKey.#ctor(System.String,System.Object[])">
            <summary>
            Default constructor.
            </summary>
            <param name="modelType">The ModelType of the entity as string.</param>
            <param name="entityKeys">The keys of the entity.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.StoreKey.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            Default constructor.
            </summary>
            <param name="entry">The object instance.</param>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.StoreKey.GetHashCode">
            <summary>
            Returns the hash code for this string.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.StoreKey.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Guid object represent the same value.
            </summary>
            <param name="obj">An object to compare to this instance.</param>
            <returns>true if g is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ChangeTracker.StoreKey.ToString">
            <summary>
            Returns a string representation of the value of this instance in registry format.
            </summary>
            <returns>The value of this System.Guid plus the current user ID, formatted by using the format specifier as follows: xxxx_####.</returns>
        </member>
    </members>
</doc>
