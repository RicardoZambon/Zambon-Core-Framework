<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Zambon.Core.Database</name>
    </assembly>
    <members>
        <member name="T:Zambon.Core.Database.CoreDbContext">
            <summary>
            A DbContext instance represents a session with the database and can be used to query and save instances of your entities. DbContext is a combination of the Unit Of Work and Repository patterns.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes a new instance of the Microsoft.EntityFrameworkCore.DbContext class using the specified options. The Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder) method will still be called to allow further configuration of the options.
            </summary>
            <param name="options">The options for this context.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Override this method to further configure the model that was discovered by convention from the entity types exposed in Microsoft.EntityFrameworkCore.DbSet`1 properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.LoadTrackedEntities">
            <summary>
            Load tracked entities already stored in distributed cache.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.ClearTrackedEntities(System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Clears the stored entities in distributed cache.
            </summary>
            <param name="clearStored">If should clear the stored entities with changes already applyed.</param>
            <param name="clearTemp">If should clear the temp stored entities.</param>
            <param name="tempModelType">Filters the temp model to clean only this same type.</param>
            <param name="forceClear">Force to clean all entities in temp.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.ApplyChanges``1(``0,System.Boolean)">
            <summary>
            Applies the changed properties into distributed cache, without saving into database.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="entity">The entity instance.</param>
            <param name="SaveIntoTemp">If should save into temp or in tracked items.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.ApplyChanges``1(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry{``0},System.Boolean)">
            <summary>
            Applies the changed properties into distributed cache, without saving into database.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="entry">The database entry instance.</param>
            <param name="SaveIntoTemp">If should save into temp or in tracked items.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.RemoveTrackedEntity``1(``0)">
            <summary>
            Remove the specified entity from the already tracked entities.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="entity">The entity instance.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.RemoveTrackedEntity(System.Type,System.Object[])">
            <summary>
            Retrieves the entity using the ID and remove it from the already tracked entities.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="keys">The entity keys to remove.</param>
        </member>
        <member name="M:Zambon.Core.Database.CoreDbContext.SaveChanges``1(``0,System.Boolean)">
            <summary>
            Saves all changes made in this context to the database.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="entity">The entity should be saved into the database.</param>
            <param name="UseTransaction">If set to true will use a transaction to save the entity into the database. Default true.</param>
            <returns>The number of state entries written to the database.</returns>
        </member>
        <member name="T:Zambon.Core.Database.DI.DatabaseInjection">
            <summary>
            Database injection methods to configure the database.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.DI.DatabaseInjection.AddDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String,System.String)">
            <summary>
            Extension method to configure the database.
            </summary>
            <param name="services">The Microsoft.Extensions.DependencyInjection.IServiceCollection to add services to.</param>
            <param name="connectionString">The database connection string.</param>
            <param name="migrationsAssemblyName">The main project running assembly name.</param>
            <param name="migrationsTableName">The table name to use in migrations assembly.</param>
            <param name="migrationsSchema">The schema name to use in migrations assembly.</param>
        </member>
        <member name="T:Zambon.Core.Database.Entity.BaseDBObject">
            <summary>
            Represents base database classes with primary key.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.Entity.BaseDBObject.ID">
            <summary>
            Primary key of the entity.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.Entity.BaseDBObject.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
            Called when executing OnConfiguring from CoreContext.
            </summary>
            <param name="entityBuilder">The object that can be used to configure a given entity type in the model.</param>
        </member>
        <member name="M:Zambon.Core.Database.Entity.BaseDBObject.OnDeleting(System.Object[])">
            <summary>
            Executed whether the object is being deleted.
            </summary>
            <param name="ctx">The current database context instance.</param>
        </member>
        <member name="M:Zambon.Core.Database.Entity.BaseDBObject.OnSaving(System.Object[])">
            <summary>
            Executed whether the object is being saved into database.
            </summary>
            <param name="ctx">The current database context instance.</param>
        </member>
        <member name="M:Zambon.Core.Database.Entity.BaseDBObject.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Default validation method, gets called every time when submitting the object to the server. Determines whether the specified object is valid.
            </summary>
            <param name="validationContext">The validation context.</param>
            <returns>Returns a list of invalid properties names and their respective errors descriptions.</returns>
        </member>
        <member name="M:Zambon.Core.Database.Entity.BaseDBObject.ValidateData(System.Object[])">
            <summary>
            Called when validating the object using the custom validation methods.
            </summary>
            <param name="ctx">The current database context instance.</param>
            <returns>Returns a list of invalid properties names and their respective errors descriptions.</returns>
        </member>
        <member name="T:Zambon.Core.Database.Entity.DBObject">
            <summary>
            Represents database tables with primary key and soft delete column.
            </summary>
        </member>
        <member name="P:Zambon.Core.Database.Entity.DBObject.IsDeleted">
            <summary>
            Determines when the object is deleted and should be hidden in application.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.Entity.DBObject.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
            Called when executing OnConfiguring from CoreContext.
            </summary>
            <param name="entityBuilder">The object that can be used to configure a given entity type in the model.</param>
        </member>
        <member name="T:Zambon.Core.Database.ExtensionMethods.DbSetExtension">
            <summary>
            Extension methods to manipulate database objects.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ExtensionMethods.DbSetExtension.Delete``1(Zambon.Core.Database.CoreDbContext,System.Int32,System.Boolean)">
            <summary>
            Deletes an object from database. If the object is of type DBObject, then will only set the IsDeleted property to true, otherwise will delete.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="ctx">Database context instance.</param>
            <param name="id">ID of the object to be deleted.</param>
            <param name="_commitChanges">If should or not use transaction when deleting.</param>
            <returns>Returns an instance of the deleted object.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ExtensionMethods.DbSetExtension.IsValid``1(``0,Zambon.Core.Database.CoreDbContext,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}@)">
            <summary>
            Validate the an entity.
            </summary>
            <typeparam name="T">Type of the entity.</typeparam>
            <param name="entity">Instance of the object.</param>
            <param name="ctx">Database context instance.</param>
            <param name="errors">Exposes the errors list if having any.</param>
            <returns>Returns true if no errors were found.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ExtensionMethods.DbSetExtension.Merge(Zambon.Core.Database.CoreDbContext,Zambon.Core.Database.Domain.Interfaces.IKeyed,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Merge the actual database values with the object from Core Change Tracker.
            </summary>
            <param name="ctx">Database context instance.</param>
            <param name="modalEntity">The instance returned from the action.</param>
            <param name="formKeys">List of user informed fields.</param>
            <returns>Returns the merged entity.</returns>
        </member>
        <member name="T:Zambon.Core.Database.ExtensionMethods.ModelBuilderExtension">
            <summary>
            Provides additional methods to use when calling ModelBuilder.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.ExtensionMethods.ModelBuilderExtension.EntitiesFromAssembly(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
                Applies configuration from all <see cref="T:Zambon.Core.Database.Domain.Interfaces.IEntity" /> and <see cref="T:Zambon.Core.Database.Interfaces.IConfigurableEntity" /> instances that are defined in provided assembly.
            </summary>
            <param name="modelBuilder">The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.</param>
            <param name="assembly">The assembly to scan.</param>
            <param name="predicate">Optional predicate to filter types within the assembly.</param>
            <returns>The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.</returns>
        </member>
        <member name="M:Zambon.Core.Database.ExtensionMethods.ModelBuilderExtension.QueriesFromAssembly(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
                Applies configuration from all <see cref="T:Zambon.Core.Database.Domain.Interfaces.IQuery" /> and <see cref="!:IConfigurable" /> instances that are defined in provided assembly.
            </summary>
            <param name="modelBuilder">The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.</param>
            <param name="assembly">The assembly to scan.</param>
            <param name="predicate">Optional predicate to filter types within the assembly.</param>
            <returns>The same <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> instance so that additional configuration calls can be chained.</returns>
        </member>
        <member name="T:Zambon.Core.Database.Interfaces.IConfigurableEntity">
            <summary>
            Defines configuration methods to use inside the database objects.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.Interfaces.IConfigurableEntity.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
            Called when executing OnConfiguring from CoreContext.
            </summary>
            <param name="queryBuilder">The object that can be used to configure a given query type in the model.</param>
        </member>
        <member name="T:Zambon.Core.Database.Interfaces.IConfigurableQuery">
            <summary>
            Defines configuration methods to use inside the database objects.
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.Interfaces.IConfigurableQuery.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder)">
            <summary>
            Called when executing OnConfiguring from CoreContext.
            </summary>
            <param name="queryBuilder">The object that can be used to configure a given query type in the model.</param>
        </member>
        <member name="T:Zambon.Core.Database.Interfaces.IDbInitializer">
            <summary>
            Generates initial database data
            </summary>
        </member>
        <member name="M:Zambon.Core.Database.Interfaces.IDbInitializer.Seed(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Used to seed the initial data, called after adding the entity types into the model.
            </summary>
            <param name="modelBuilder">The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database.</param>
        </member>
    </members>
</doc>
